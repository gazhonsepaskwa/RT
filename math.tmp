void	rot_x(t_map *map, float angle)
{
	t_mat3x3	r_x;

	r_x = (t_mat3x3){
		1, 0, 0,
		0, cos(angle), -sin(angle),
		0, sin(angle), cos(angle)};
	move_map(map, r_x);
}

void	rot_y(t_map *map, float angle)
{
	t_mat3x3	r_y;

	r_y = (t_mat3x3){
		cos(angle), 0, sin(angle),
		0, 1, 0,
		-sin(angle), 0, cos(angle)};
	move_map(map, r_y);
}

t_pt	mult_mat(t_mat3x3 mat, t_pt p)
{
	t_pt	res;

	res.x = p.x * mat.c1r1 + p.y * mat.c2r1 + p.z * mat.c3r1;
	res.y = p.x * mat.c1r2 + p.y * mat.c2r2 + p.z * mat.c3r2;
	res.z = p.x * mat.c1r3 + p.y * mat.c2r3 + p.z * mat.c3r3;
	res.color = p.color;
	return (res);
}

typedef struct s_mat3x3
{
	float	c1r1;
	float	c1r2;
	float	c1r3;
	float	c2r1;
	float	c2r2;
	float	c2r3;
	float	c3r1;
	float	c3r2;
	float	c3r3;
}	t_mat3x3;
